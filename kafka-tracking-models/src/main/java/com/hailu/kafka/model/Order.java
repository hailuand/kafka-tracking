/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hailu.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4644673378270483523L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.hailu.kafka.model\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"enum\",\"name\":\"UserId\",\"symbols\":[\"USER_ZERO\",\"USER_ONE\",\"USER_TWO\"]}},{\"name\":\"nbOfItems\",\"type\":\"int\"},{\"name\":\"totalAmount\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.hailu.kafka.model.UserId userId;
  private int nbOfItems;
  private int totalAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param nbOfItems The new value for nbOfItems
   * @param totalAmount The new value for totalAmount
   */
  public Order(com.hailu.kafka.model.UserId userId, java.lang.Integer nbOfItems, java.lang.Integer totalAmount) {
    this.userId = userId;
    this.nbOfItems = nbOfItems;
    this.totalAmount = totalAmount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return nbOfItems;
    case 2: return totalAmount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (com.hailu.kafka.model.UserId)value$; break;
    case 1: nbOfItems = (java.lang.Integer)value$; break;
    case 2: totalAmount = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public com.hailu.kafka.model.UserId getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(com.hailu.kafka.model.UserId value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'nbOfItems' field.
   * @return The value of the 'nbOfItems' field.
   */
  public int getNbOfItems() {
    return nbOfItems;
  }


  /**
   * Sets the value of the 'nbOfItems' field.
   * @param value the value to set.
   */
  public void setNbOfItems(int value) {
    this.nbOfItems = value;
  }

  /**
   * Gets the value of the 'totalAmount' field.
   * @return The value of the 'totalAmount' field.
   */
  public int getTotalAmount() {
    return totalAmount;
  }


  /**
   * Sets the value of the 'totalAmount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(int value) {
    this.totalAmount = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.hailu.kafka.model.Order.Builder newBuilder() {
    return new com.hailu.kafka.model.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.hailu.kafka.model.Order.Builder newBuilder(com.hailu.kafka.model.Order.Builder other) {
    if (other == null) {
      return new com.hailu.kafka.model.Order.Builder();
    } else {
      return new com.hailu.kafka.model.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.hailu.kafka.model.Order.Builder newBuilder(com.hailu.kafka.model.Order other) {
    if (other == null) {
      return new com.hailu.kafka.model.Order.Builder();
    } else {
      return new com.hailu.kafka.model.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private com.hailu.kafka.model.UserId userId;
    private int nbOfItems;
    private int totalAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hailu.kafka.model.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nbOfItems)) {
        this.nbOfItems = data().deepCopy(fields()[1].schema(), other.nbOfItems);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[2].schema(), other.totalAmount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hailu.kafka.model.Order other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nbOfItems)) {
        this.nbOfItems = data().deepCopy(fields()[1].schema(), other.nbOfItems);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[2].schema(), other.totalAmount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public com.hailu.kafka.model.UserId getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.hailu.kafka.model.Order.Builder setUserId(com.hailu.kafka.model.UserId value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.hailu.kafka.model.Order.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nbOfItems' field.
      * @return The value.
      */
    public int getNbOfItems() {
      return nbOfItems;
    }


    /**
      * Sets the value of the 'nbOfItems' field.
      * @param value The value of 'nbOfItems'.
      * @return This builder.
      */
    public com.hailu.kafka.model.Order.Builder setNbOfItems(int value) {
      validate(fields()[1], value);
      this.nbOfItems = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nbOfItems' field has been set.
      * @return True if the 'nbOfItems' field has been set, false otherwise.
      */
    public boolean hasNbOfItems() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nbOfItems' field.
      * @return This builder.
      */
    public com.hailu.kafka.model.Order.Builder clearNbOfItems() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAmount' field.
      * @return The value.
      */
    public int getTotalAmount() {
      return totalAmount;
    }


    /**
      * Sets the value of the 'totalAmount' field.
      * @param value The value of 'totalAmount'.
      * @return This builder.
      */
    public com.hailu.kafka.model.Order.Builder setTotalAmount(int value) {
      validate(fields()[2], value);
      this.totalAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAmount' field has been set.
      * @return True if the 'totalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'totalAmount' field.
      * @return This builder.
      */
    public com.hailu.kafka.model.Order.Builder clearTotalAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.userId = fieldSetFlags()[0] ? this.userId : (com.hailu.kafka.model.UserId) defaultValue(fields()[0]);
        record.nbOfItems = fieldSetFlags()[1] ? this.nbOfItems : (java.lang.Integer) defaultValue(fields()[1]);
        record.totalAmount = fieldSetFlags()[2] ? this.totalAmount : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.userId.ordinal());

    out.writeInt(this.nbOfItems);

    out.writeInt(this.totalAmount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.userId = com.hailu.kafka.model.UserId.values()[in.readEnum()];

      this.nbOfItems = in.readInt();

      this.totalAmount = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.userId = com.hailu.kafka.model.UserId.values()[in.readEnum()];
          break;

        case 1:
          this.nbOfItems = in.readInt();
          break;

        case 2:
          this.totalAmount = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










